// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gopherchatterpb/gopherchatter.proto

package gopherchatterpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Msg struct {
	M                    string   `protobuf:"bytes,1,opt,name=m,proto3" json:"m,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_384a5ec22632b844, []int{0}
}

func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetM() string {
	if m != nil {
		return m.M
	}
	return ""
}

func init() {
	proto.RegisterType((*Msg)(nil), "gopherchatter.Msg")
}

func init() {
	proto.RegisterFile("gopherchatterpb/gopherchatter.proto", fileDescriptor_384a5ec22632b844)
}

var fileDescriptor_384a5ec22632b844 = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0xcf, 0x2f, 0xc8,
	0x48, 0x2d, 0x4a, 0xce, 0x48, 0x2c, 0x29, 0x49, 0x2d, 0x2a, 0x48, 0xd2, 0x47, 0xe1, 0xeb, 0x15,
	0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xf1, 0xa2, 0x08, 0x2a, 0x09, 0x73, 0x31, 0xfb, 0x16, 0xa7, 0x0b,
	0xf1, 0x70, 0x31, 0xe6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x31, 0xe6, 0x1a, 0x79, 0x70,
	0xf1, 0xba, 0x83, 0x55, 0x39, 0x43, 0x54, 0x09, 0x99, 0x73, 0xb1, 0xfb, 0xa6, 0x16, 0x17, 0x27,
	0xa6, 0xa7, 0x0a, 0x09, 0xe9, 0xa1, 0x9a, 0xea, 0x5b, 0x9c, 0x2e, 0x85, 0x45, 0x4c, 0x89, 0x41,
	0x83, 0xd1, 0x80, 0xd1, 0x49, 0x30, 0x8a, 0x1f, 0xcd, 0x51, 0x49, 0x6c, 0x60, 0x77, 0x18, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x61, 0xa2, 0xd7, 0xae, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GopherChatterClient is the client API for GopherChatter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GopherChatterClient interface {
	Message(ctx context.Context, opts ...grpc.CallOption) (GopherChatter_MessageClient, error)
}

type gopherChatterClient struct {
	cc *grpc.ClientConn
}

func NewGopherChatterClient(cc *grpc.ClientConn) GopherChatterClient {
	return &gopherChatterClient{cc}
}

func (c *gopherChatterClient) Message(ctx context.Context, opts ...grpc.CallOption) (GopherChatter_MessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GopherChatter_serviceDesc.Streams[0], "/gopherchatter.GopherChatter/Message", opts...)
	if err != nil {
		return nil, err
	}
	x := &gopherChatterMessageClient{stream}
	return x, nil
}

type GopherChatter_MessageClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type gopherChatterMessageClient struct {
	grpc.ClientStream
}

func (x *gopherChatterMessageClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gopherChatterMessageClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GopherChatterServer is the server API for GopherChatter service.
type GopherChatterServer interface {
	Message(GopherChatter_MessageServer) error
}

// UnimplementedGopherChatterServer can be embedded to have forward compatible implementations.
type UnimplementedGopherChatterServer struct {
}

func (*UnimplementedGopherChatterServer) Message(srv GopherChatter_MessageServer) error {
	return status.Errorf(codes.Unimplemented, "method Message not implemented")
}

func RegisterGopherChatterServer(s *grpc.Server, srv GopherChatterServer) {
	s.RegisterService(&_GopherChatter_serviceDesc, srv)
}

func _GopherChatter_Message_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GopherChatterServer).Message(&gopherChatterMessageServer{stream})
}

type GopherChatter_MessageServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type gopherChatterMessageServer struct {
	grpc.ServerStream
}

func (x *gopherChatterMessageServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gopherChatterMessageServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GopherChatter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gopherchatter.GopherChatter",
	HandlerType: (*GopherChatterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Message",
			Handler:       _GopherChatter_Message_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gopherchatterpb/gopherchatter.proto",
}
